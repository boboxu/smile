package com.heme.logic.module;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.heme.logic.module.Message.CommonMsg;
import com.heme.logic.module.Message.ContentType;
import com.heme.logic.module.Message.MessageType;
import com.heme.logic.module.Message.CommonMsg.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COMMON_MSG.
*/
public class CommonMsgDao extends AbstractDao<CommonMsg, Long> {

    public static final String TABLENAME = "COMMON_MSG";

    /**
     * Properties of entity CommonMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uint64MsgId = new Property(0, Long.class, "Uint64MsgId", true, "UINT64_MSG_ID");
        public final static Property Uint64FromUid = new Property(1, long.class, "Uint64FromUid", false, "UINT64_FROM_UID");
        public final static Property Uint64ToUid = new Property(2, Long.class, "Uint64ToUid", false, "UINT64_TO_UID");
        public final static Property Uint64ToGid = new Property(3, Long.class, "Uint64ToGid", false, "UINT64_TO_GID");
        public final static Property Uint32MsgType = new Property(4, int.class, "Uint32MsgType", false, "UINT32_MSG_TYPE");
        public final static Property Uint32ContentType = new Property(5, Integer.class, "Uint32ContentType", false, "UINT32_CONTENT_TYPE");
        public final static Property StrTextMsg = new Property(6, String.class, "StrTextMsg", false, "STR_TEXT_MSG");
        public final static Property Uint64Time = new Property(7, Long.class, "Uint64Time", false, "UINT64_TIME");
        public final static Property Uint32TrunctFlag = new Property(8, Integer.class, "Uint32TrunctFlag", false, "UINT32_TRUNCT_FLAG");
    };


    public CommonMsgDao(DaoConfig config) {
        super(config);
    }
    
    public CommonMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COMMON_MSG' (" + //
                "'UINT64_MSG_ID' INTEGER PRIMARY KEY ," + // 0: Uint64MsgId
                "'UINT64_FROM_UID' INTEGER NOT NULL ," + // 1: Uint64FromUid
                "'UINT64_TO_UID' INTEGER," + // 2: Uint64ToUid
                "'UINT64_TO_GID' INTEGER," + // 3: Uint64ToGid
                "'UINT32_MSG_TYPE' INTEGER NOT NULL ," + // 4: Uint32MsgType
                "'UINT32_CONTENT_TYPE' INTEGER," + // 5: Uint32ContentType
                "'STR_TEXT_MSG' TEXT," + // 6: StrTextMsg
                "'UINT64_TIME' INTEGER," + // 7: Uint64Time
                "'UINT32_TRUNCT_FLAG' INTEGER);"); // 8: Uint32TrunctFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COMMON_MSG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommonMsg entity) {
        stmt.clearBindings();
        if(entity.hasUint64MsgId()) {
            stmt.bindLong(1, entity.getUint64MsgId());
        }
        if(entity.hasUint64FromUid()) {
            stmt.bindLong(2, entity.getUint64FromUid());
        }
        if(entity.getUint64ToUidList() != null) {
            stmt.bindLong(3, entity.getUint64ToUid(0));
        }
        if(entity.getUint64ToGidList() != null) {
            stmt.bindLong(4, entity.getUint64ToGid(0));
        }
        if(entity.hasUint32MsgType()) {
            stmt.bindLong(5, entity.getUint32MsgType().getNumber());
        }
        if(entity.hasUint32ContentType()) {
            stmt.bindLong(6, entity.getUint32ContentType().getNumber());
        }
        if(entity.hasStrTextMsg()) {
            stmt.bindString(7, entity.getStrTextMsg());
        }
        if(entity.hasUint64Time()) {
            stmt.bindLong(8, entity.getUint64Time());
        }
        if(entity.hasUint32TrunctFlag()) {
            stmt.bindLong(9, entity.getUint32TrunctFlag());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommonMsg readEntity(Cursor cursor, int offset) {
        Builder builder = CommonMsg.newBuilder();
        if (!cursor.isNull(offset + 0)) {
            builder.setUint64MsgId(cursor.getLong(offset + 0));
        }
        builder.setUint64FromUid(cursor.getLong(offset + 1));
        if (!cursor.isNull(offset + 2)) {
            builder.setUint64ToUid(0, cursor.getLong(offset + 2));
        }
        if (!cursor.isNull(offset + 3)) {
            builder.setUint64ToGid(0, cursor.getLong(offset + 3));
        }
        builder.setUint32MsgType(MessageType.valueOf(cursor.getInt(offset + 4)));
        if (!cursor.isNull(offset + 5)) {
            builder.setUint32ContentType(ContentType.valueOf(cursor.getInt(offset + 5)));
        }
        if (!cursor.isNull(offset + 6)) {
            builder.setStrTextMsg(cursor.getString(offset + 6));
        }
        if (!cursor.isNull(offset + 7)) {
            builder.setUint64Time(cursor.getLong(offset + 7));
        }
        if (!cursor.isNull(offset + 8)) {
            builder.setUint32TrunctFlag(cursor.getInt(offset + 8));
        }
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommonMsg entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CommonMsg entity, long rowId) {
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CommonMsg entity) {
        if(entity != null) {
            return entity.getUint64MsgId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
