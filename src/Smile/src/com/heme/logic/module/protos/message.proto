////////////////////////////////////////////////////////////////////////////////////////////////
//消息定义
////////////////////////////////////////////////////////////////////////////////////////////////
message PicMsgInfo
{
	required string    str_pic_url = 1;		//图片URL
	optional string    str_thumb_url = 2;		//图片缩略图URL
	optional uint32    uint32_size = 3;		//图片文件大小
	optional string    str_pic_type = 4;		//图片类型，可选
	optional uint32    uint32_pic_width = 5;	//图片分辨率x
	optional uint32    uint32_pic_height = 6;	//图片分辨率y
	optional string    str_file_name = 7;           //文件名
	optional string    str_file_info = 8;		//文件描述
};

message VoiceMsgInfo
{
	required string    str_voice_url = 1;		//语音URL
	optional uint32    uint32_size = 2;		//语音文件大小
	optional uint32    uint32_duration = 3;		//语音时长
	optional string    str_file_name = 4;           //文件名
	optional string    str_file_info = 5;		//文件描述
};

message VideoMsgInfo
{
	required string    str_video_url = 1;		//视频URL
	optional string    str_thumb_url = 2;		//视频缩略图URL
	optional uint32    uint32_size = 3;		//视频文件大小
	optional uint32    uint32_duration = 4;		//视频时长
	optional string    str_video_format = 5;	//视频格式
	optional uint32    uint32_video_width = 6;	//视频分辨率x
	optional uint32    uint32_video_height = 7;	//视频分辨率y
	optional string    str_file_name = 8;           //文件名
	optional string    str_file_info = 9;		//文件描述
};

message FileInfo
{
	required string    str_file_url = 1;		//文件URL
	optional uint32    uint32_size = 2;		//文件大小
	optional string    str_file_name = 3;           //文件名
	optional string    str_file_info = 4;		//文件描述
};


//绿色上网助手
message NetGuardInfo
{
	required uint32    uint32_action = 1;		//操作 1:上报 2:重启 3:关机 4:关闭进程 5:信息拦截
	required uint32    uint32_event_id = 2;         //事件ID
	optional string    str_ReportInfo = 3;		//上报文本信息
};

//认证请求
message VerifyRequest
{
	required uint32    uint32_verify_type = 1;	//验证类型：0:加好友 1:加群
	optional bytes     bytes_verify_key = 2;        //预留，发起方从data server获取到的一个key
	optional string    stri_verify_info = 3;        //验证信息
};

///////////////////////////////////////////////////////////////////
//语音测评
//
//被测试的学生uid和家长uid，老师发起测评的时候可以不带，由server填充，接收方要记下，后续的所有消息都要带上
//主要是供server做转发时使用，担心转乱了
//家长版收到语音测评时可能要展示一下是给哪个学生的测试消息，因为一个家长可能对应多个学生
//老师版收到应答的时候也要使用uint64_student_uid展示作答方，因为作答的消息是用家长的id发出的。。。
message VoiceTestInfo
{
	required uint32    uint32_action = 1;           //操作 1:提问 2:回答 3:评分
	optional uint64    uint64_student_uid = 2;      //被测试的学生uid，由server填充，老师发起测评的时候可以不带，接收方要记下，后续的所有消息都要带上
	optional uint64    uint64_parent_uid = 3;       //被测试学生家长的uid，由server填充，老师发起测评的时候可以不带，接收方要记下，后续的所有消息都要带上
	optional string    string_course = 4;		//课程信息
	optional string    string_class = 5;		//班级信息
	optional uint32    string_question = 6;         //问题描述
	optional VoiceMsgInfo msg_voice_answer = 7;     //语音回答
	optional string    str_text_answer = 8;         //文字回答
	optional uint32    uint32_score = 9;            //评分 1:好 2:中 3:差
	optional uint32    str_comment = 10;             //评语
};

//课堂信息助手
message ClassInfo					
{
	optional string    str_course = 1;		//科目
	optional string    str_content = 2;		//内容
};

//消息类型
enum MessageType
{
	MT_All = 0;		//所有类型，仅在PollMsgReq使用
	MT_C2C = 1;		//c2c消息
	MT_Group = 2;		//群消息
	MT_System = 3;		//系统消息
	MT_Community = 4;	//社区群组消息
	MT_Broadcast = 5;	//公告
	MT_ClassInfo = 6;	//课堂信息助手
	MT_VoiceTest = 7;	//语音测评
	MT_NetGuard = 8;	//绿色上网助手
	MT_VerifyReq = 9;	//认证请求
};

//媒体类型
enum ContentType
{
	CT_Text = 0;	//文本
	CT_Picture = 1;	//图片
	CT_Voice = 2;	//语音
	CT_Video = 3;	//视频
	CT_File = 4;	//文件
	CT_IDCard = 5;	//名片
};

message CommonMsg
{
	required uint64    uint64_from_uid = 1;		//发送方ID
	repeated uint64    uint64_to_uid = 2;		//接收方用户ID，0-N个，一般为1个，发送语音测评消息时可以指定多个接收用户
	repeated uint64    uint64_to_gid = 3;		//接收方群ID 
	required MessageType    uint32_msg_type = 4;	//消息类型
	optional ContentType    uint32_content_type = 5;//媒体类型
	optional string    str_text_msg = 6;		//文本消息内容	
	optional PicMsgInfo msg_pic_msg = 7;		//图片消息，媒体类型为1时使用
	optional VoiceMsgInfo msg_voice_msg = 8;	//语音消息，媒体类型为2时使用
	optional VideoMsgInfo msg_video_msg = 9;	//视频消息，媒体类型为3时使用
	optional NetGuardInfo msg_moitor_msg = 10;	//绿色上网助手与终端交互消息
	optional VoiceTestInfo msg_test_msg = 11;       //语音测评消息
	optional ClassInfo msg_class_info = 12;         //课堂信息
	optional VerifyRequest msg_verify_req = 13;     //验证请求消息（加好友或加群）
	optional FileInfo  msg_file_info = 14;		//文件传输
	optional uint64    uint64_time = 20;		//发送方终端当前时间
	optional uint32    uint32_trunct_flag = 21;	//内容截短标志，PushMsgReq有可能截短内容，终端需要重要拉取完整内容，缺省表示不截短
	optional uint64    uint64_msg_id = 22;		//消息id，只是一个全局唯一的编号，无实际意义。
};

message UnReadInfo		//未读消息属性
{
	required uint32    uint32_msg_type = 1;		//消息类型 1:c2c 2:群消息 3:系统消息 4:社区群组消息 5:公告 6:课堂信息助手 7:语音测评 8:绿色上网助手
	optional uint64    uint64_from_uid = 2;		//发送方ID
	optional uint64    uint64_to_uid = 3;		//接收方ID, uid
	optional uint64    uint64_to_gid = 4;		//接收方ID, 群号 (uint64_to_uid/uint64_to_gid两个参数二选一)
	required uint32    uint32_unread_count = 5;	//未读条数
};

////////////////////////////////////////////////////////////////////////////////////////////////
//终端发送消息
////////////////////////////////////////////////////////////////////////////////////////////////
message SendMsgReq
{
	required CommonMsg msg_sendmsg = 1;
};

message SendMsgRes
{
	required uint32    uint32_result = 1;		//0:成功
	optional uint32    uint32_peer_status = 2;	//对方状态，仅当发送c2c消息时会返回。
};

////////////////////////////////////////////////////////////////////////////////////////////////
//后台主动推送给终端的通知
//场景：用户有新的消息
// 终端收到PushMsgReq不需要response，但是需要主动发送一条"接收确认"消息到server
// 并复制PushMsgReq消息中的bytes_context字段（参见MessageOpr定义）
////////////////////////////////////////////////////////////////////////////////////////////////
message PushMsgReq
{
	repeated CommonMsg rpt_msg_pushmsg = 1;		//消息列表
};

////////////////////////////////////////////////////////////////////////////////////////////////
//终端主动拉取未读消息列表
//场景：上线
////////////////////////////////////////////////////////////////////////////////////////////////
message PollUnreadInfoReq
{
	required uint64    uint64_uid = 1;		//接收方ID
};

message PollUnreadInfoRes
{
	repeated UnReadInfo msg_unread_info = 4;	//未读消息列表
};

////////////////////////////////////////////////////////////////////////////////////////////////
//终端主动拉取消息
//场景：
// 1.用户点击进入聊天/公告/课堂信息助手/语音测评页面
// 2.收到未读消息通知
////////////////////////////////////////////////////////////////////////////////////////////////
message PollMsgReq
{
	required uint64    uint64_uid = 1;		//接收方ID
	required MessageType    uint32_msg_type = 2;	//拉取的消息类型 0:所有类型
	optional uint64    uint64_from_uid = 3;		//可选参数，如果提供这个参数将只拉取指定用户的消息，否则将拉取所有消息
	optional uint64    uint64_gid = 4;		//可选参数，如果提供这个参数将只拉取指定群的消息，否则将拉取所有消息
	optional uint64    uint64_time = 5;		//接收方终端当前时间
};

//终端收到PollMsgRes后需要主动发送一条"接收确认"消息到server，复制PollMsgRes消息中的bytes_context字段（参见MessageOpr定义）
message PollMsgRes
{
	repeated CommonMsg rpt_msg_pollmsg = 1;		//消息列表
	optional uint32    uint32_complete_flag = 2;    //拉取完成标志，1表示消息拉取完成，0表示未完成（如果返回内容太多，server有可能分多次返回）
};

enum MsgCommand
{
	MC_SendMsgReq = 1;		//发送请求
	MC_SendMsgRes = 2;		//发送确认
	MC_PushMsgReq = 3;		//推送请求
	MC_RecvMsgNot = 4;		//已收通知
	MC_PollMsgReq = 5;		//拉取请求
	MC_PollMsgRes = 6;		//拉取结果
	MC_PollUnreadInfoReq = 7;	//拉取未读列表请求
	MC_PollUnreadInfoRes = 8;	//拉取未读列表结果
};

//uint32_command为MC_RecvMsgNot时，只需要提供uint64_uid/uint32_command/msg_context，不需要其它参数
message MessageOpr
{
	required uint64    uint64_uid = 1;		//用户ID
	required MsgCommand    uint32_command = 2;	//命令号
	optional string	   str_version = 3;		//版本号
	optional uint32    uint32_client_type = 4;	//客户端类型，1：家长；2：学生；3：老师 10000:绿色上网助手/管理页面/SDK
	optional string    string_session_id = 5;	//预留，暂时不用
	optional bytes     bytes_context = 6;           //如果请求包带有这个参数，返回包应该原封不动返回

	optional SendMsgReq msg_send_req = 7;		//发送请求
	optional SendMsgRes msg_send_res = 8;		//发送确认
	optional PushMsgReq msg_push_req = 9;		//推送请求
	optional PollMsgReq msg_poll_req = 10;		//拉取请求
	optional PollMsgRes msg_poll_res = 11;		//拉取结果
	optional PollUnreadInfoReq msg_poll_unread_req = 12;	//拉取未读列表请求
	optional PollUnreadInfoRes msg_poll_unread_res = 13;	//拉取未读列表结果
};
