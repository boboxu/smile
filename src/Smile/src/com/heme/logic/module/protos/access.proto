///////////////////////////////////////////////////////////////////////////////////////////
///
///	客户端请求包格式：
///		dwPkgLen(4字节网络字节序) + AccessReq序列化内容
///	后台响应包格式:
///		dwPkgLen(4字节网络字节序) + AccessResp序列化内容
///
///	后台Push请求包格式：
///		dwPkgLen(4字节网络字节序) + PushReq序列化内容
///	客户端Push响应包格式：
///		dwPkgLen(4字节网络字节序) + PushResp序列化内容
///
///////////////////////////////////////////////////////////////////////////////////////////

//客户端所有信令，发出前均通过该协议包装
//请求中 uint32_seq 用来标记请求的序号，接入svr回包时会填上
//请求中 str_cmd 用来表示请求的类型，svr收到后会依照请求命令字来解 bytes_body
message AccessReq
{
	required uint64 uint64_uid = 1;			//帐号
	required uint32 uint32_seq = 2;			//请求包序号
	required string str_cmd = 3;			//请求的命令字
	required bytes bytes_body = 4;			//请求信令包体，该字段为protocol序列化内容
}
//svr回包时会带上客户端请求的 uint32_seq，客户端用来确定是哪次请求的回包，如指定时间未收到后台回报，则客户端需重发
message AccessResp
{
	required uint32 uint32_seq = 1;			//请求包序号
	required bytes bytes_body = 2;			//响应信令包体，该字段为protocol序列化内容
}

//svr会主动给客户端推送一些指令，客户端依照 str_cmd 来区分 bytes_body 应该使用那个 proto 协议来解
message PushReq
{
	required uint64 uint64_uid = 1;			//帐号
	required uint32 uint32_seq = 2;			//Push包序号
	required string str_cmd = 3;			//Push命令字
	required bytes bytes_body = 4;			//Push信令包体，该字段为protocol序列化内容
}
//客户端需要把Push包里的 uint32_seq 回传给接入服务器，用来确认客户端已经收到该 Push，否则svr会进行1次重发
message PushResp
{
	required uint32 uint32_seq = 1;			//Push包序号
}
